name: MCP hub Build and Push
on:
  push:
    branches:
      - develop
      - main
  workflow_dispatch:
    inputs:
      mcp:
        description: "MCP to import"
      all:
        description: "Import all MCPs"
        type: choice
        required: false
        default: "false"
        options:
          - "false"
          - "true"

env:
  REGISTRY: ghcr.io
  TAG: ${{ github.sha }}
  BL_ENV: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
  DEV_IMAGE_BUCKET: controlplane-dev-build-images-eu-west-1-37df18
  PROD_IMAGE_BUCKET: controlplane-prod-build-images-us-west-2-466b17

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      servers: ${{ steps.retrieve-servers.outputs.servers }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch last 2 commits to compare changes
      - name: Retrieve hub servers
        id: retrieve-servers
        shell: bash
        run: |
          cd hub
          if [[ ! -z "${{ inputs.mcp }}" ]]; then
            echo "servers=[\"${{ inputs.mcp }}\"]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get list of all server YAML files
          all_servers=$(tree -J -L 1 | jq -c '.[0].contents | map(.name | rtrimstr(".yaml"))')

          # Filter servers based on changes
          changed_servers=()

          if [[ "${{ inputs.all }}" == "true" ]]; then
            echo "Importing all servers (excluding disabled/coming soon)"
            for server in $(echo $all_servers | jq -r '.[]'); do
              # Check if the server is disabled or coming soon
              if [ -f "${server}.yaml" ]; then
                disabled=$(grep -E "^disabled: true" "${server}.yaml" || true)
                coming_soon=$(grep -E "^comingSoon: true" "${server}.yaml" || true)
                if [ -z "$disabled" ] && [ -z "$coming_soon" ]; then
                  changed_servers+=("$server")
                else
                  echo "Skipping $server (disabled or coming soon)"
                fi
              fi
            done
          else
            # Check if there are changes in internal or cmd folders
            if git diff --name-only HEAD^ HEAD | grep -q "internal/" || \
               git diff --name-only HEAD^ HEAD | grep -q "cmd/"; then
              # If there are changes in internal or cmd, include all servers (excluding disabled/coming soon)
              echo "Changes detected in internal or cmd folders, including all servers (excluding disabled/coming soon)"
              for server in $(echo $all_servers | jq -r '.[]'); do
                # Check if the server is disabled or coming soon
                if [ -f "${server}.yaml" ]; then
                  disabled=$(grep -E "^disabled: true" "${server}.yaml" || true)
                  coming_soon=$(grep -E "^comingSoon: true" "${server}.yaml" || true)
                  if [ -z "$disabled" ] && [ -z "$coming_soon" ]; then
                    changed_servers+=("$server")
                  else
                    echo "Skipping $server (disabled or coming soon)"
                  fi
                fi
              done
            else
              # Otherwise, only include servers with specific changes (excluding disabled/coming soon)
              for server in $(echo $all_servers | jq -r '.[]'); do
                if git diff --name-only HEAD^ HEAD | grep -q "hub/${server}.yaml" || \
                   git diff --name-only HEAD^ HEAD | grep -q "hub/${server}/"; then
                  # Check if the server is disabled or coming soon
                  if [ -f "${server}.yaml" ]; then
                    disabled=$(grep -E "^disabled: true" "${server}.yaml" || true)
                    coming_soon=$(grep -E "^comingSoon: true" "${server}.yaml" || true)
                    if [ -z "$disabled" ] && [ -z "$coming_soon" ]; then
                      changed_servers+=("$server")
                    else
                      echo "Skipping $server (disabled or coming soon)"
                    fi
                  fi
                fi
              done
            fi
          fi

          # Convert array to JSON array
          if [ ${#changed_servers[@]} -eq 0 ]; then
            echo "No servers with changes found"
            echo "servers=[]" >> $GITHUB_OUTPUT
          else
            # Create a properly formatted JSON array
            servers_json="["
            for server in "${changed_servers[@]}"; do
              if [ "$servers_json" != "[" ]; then
                servers_json="$servers_json,"
              fi
              servers_json="$servers_json\"$server\""
            done
            servers_json="$servers_json]"
            echo "servers=$servers_json" >> $GITHUB_OUTPUT
          fi
  publish:
    runs-on: ubuntu-latest
    environment: |-
      ${{
        github.ref_name == 'main' && 'prod'
      || github.ref_name == 'develop' && 'dev'
      || 'dev'
      }}
    env:
      BL_API_URL: ${{ vars.BL_API_URL }}
      BL_ADMIN_USERNAME: ${{ secrets.BL_ADMIN_USERNAME }}
      BL_ADMIN_PASSWORD: ${{ secrets.BL_ADMIN_PASSWORD }}
    needs:
      - generate-matrix
    strategy:
      matrix:
        server: ${{ fromJson(needs.generate-matrix.outputs.servers )}}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Echo server
        run: |
          echo "Server: ${{ matrix.server }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Go 1.21.x
        uses: actions/setup-go@v5
        with:
          # Semantic version range syntax or exact version of Go
          go-version: "1.23.3"
      - name: Install dependencies
        run: go get .
      - name: Build super gateway
        run: |
          make build-super-gateway
      - name: Build and push
        run: |
          go run main.go import \
            -p \
            -r ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.BL_ENV }} \
            -m ${{ matrix.server }} \
            -t ${{ env.TAG }}
  mk3-build:
    runs-on: codebuild-mcp-hub-${{ github.run_id }}-${{ github.run_attempt }}
    environment: |-
      ${{
        github.ref_name == 'main' && 'prod'
      || github.ref_name == 'develop' && 'dev'
      || 'dev'
      }}
    env:
      BL_API_URL: ${{ vars.BL_API_URL }}
      BL_ADMIN_USERNAME: ${{ secrets.BL_ADMIN_USERNAME }}
      BL_ADMIN_PASSWORD: ${{ secrets.BL_ADMIN_PASSWORD }}
    needs: [generate-matrix, publish]
    if: always() && needs.generate-matrix.outputs.servers != '[]' && needs.publish.result == 'success'
    strategy:
      matrix:
        server: ${{ fromJson(needs.generate-matrix.outputs.servers )}}
    steps:
      - name: Build mk3 image
        env:
          MCP_NAME: ${{ matrix.server }}
          IMAGE_TAG: ${{ env.TAG }}
          BL_TYPE: function
          STAGE: ${{ env.BL_ENV }}
          SRC_REGISTRY: ${{ env.REGISTRY }}/${{ github.repository }}
          BUILD_ID: ${{ github.run_id }}-${{ github.run_attempt }}
          LOG_LEVEL: debug
          IMAGE_BUCKET_MK3: ${{ env.BL_ENV == 'prod' && env.PROD_IMAGE_BUCKET || env.DEV_IMAGE_BUCKET }}
          DEPOT_PROJECT_ID: ${{ env.BL_ENV == 'prod' && secrets.DEPOT_PROJECT_ID_PROD || secrets.DEPOT_PROJECT_ID_DEV }}
          LAMBDA_FUNCTION_NAME: controlplane-${{ env.BL_ENV }}-metamorph
          LAMBDA_REGION: ${{ env.BL_ENV == 'prod' && secrets.LAMBDA_REGION_PROD || secrets.LAMBDA_REGION_DEV }}
          DEPOT_TOKEN: ${{ env.BL_ENV == 'prod' && secrets.DEPOT_TOKEN_PROD || secrets.DEPOT_TOKEN_DEV }}
        run: |
          # Build the JSON payload
          PAYLOAD=$(cat <<EOF
          {
            "otel_enabled": false,
            "bl_env": "$STAGE",
            "output_s3": "s3://$IMAGE_BUCKET_MK3/$MCP_NAME/$IMAGE_TAG",
            "no_optimize": false,
            "depot_token": "$DEPOT_TOKEN",
            "bl_build_id": "$BUILD_ID",
            "bl_type": "$BL_TYPE",
            "bl_generation": "mk3",
            "log_level": "$LOG_LEVEL",
            "depot_project_id": "$DEPOT_PROJECT_ID",
            "image": "$SRC_REGISTRY/$STAGE/$MCP_NAME:$IMAGE_TAG"
          }
          EOF
          )
          
          echo "Invoking Lambda function: $LAMBDA_FUNCTION_NAME"
          echo "MCP Name: $MCP_NAME"
          echo "Image Tag: $IMAGE_TAG"
          echo "BL Type: $BL_TYPE"
          echo "Lambda Region: $LAMBDA_REGION"
          
          # Show S3 output location
          echo "Target S3 location:"
          echo "s3://$IMAGE_BUCKET_MK3/$MCP_NAME/$IMAGE_TAG"
          
          # Invoke Lambda and capture response
          aws lambda invoke \
            --function-name "$LAMBDA_FUNCTION_NAME" \
            --region "$LAMBDA_REGION" \
            --payload "$PAYLOAD" \
            --cli-binary-format raw-in-base64-out \
            --log-type Tail \
            --no-cli-pager \
            --cli-read-timeout 900 \
            --cli-connect-timeout 60 \
            /tmp/response.json
          
          # Check response
          if [ -f /tmp/response.json ]; then
            echo "Lambda response received, parsing..."
            
            # First, let's check if we have valid JSON
            if ! jq empty /tmp/response.json 2>/dev/null; then
              echo "Warning: Lambda response is not valid JSON"
              cat /tmp/response.json
            else
              cat /tmp/response.json | jq '.'
            fi
            
            # we check for successful status code (200)
            STATUS_CODE=$(jq -r '.StatusCode // 0' /tmp/response.json 2>/dev/null)
            if [ "$STATUS_CODE" != "200" ]; then
              echo "Build failed with status code: $STATUS_CODE"
              exit 1
            fi

            echo "Build completed successfully"
            
            # Update image registry after successful build
            echo "Updating image registry..."
            
            # Create Basic auth header (base64 encode username:password)
            AUTH_HEADER=$(echo -n "$BL_ADMIN_USERNAME:$BL_ADMIN_PASSWORD" | base64)
            
            # Workspace is always blaxel
            WORKSPACE="blaxel"
            
            # Determine registry type based on the registry URL
            if [[ "${{ env.REGISTRY }}" == "ghcr.io" ]]; then
              REGISTRY_TYPE="github"
            else
              REGISTRY_TYPE="docker_hub"
            fi
            
            # Prepare the JSON payload for the API
            API_PAYLOAD=$(jq -n \
              --arg registry "${{ env.REGISTRY }}" \
              --arg workspace "$WORKSPACE" \
              --arg repository "$MCP_NAME" \
              --arg tag "$IMAGE_TAG" \
              --arg registry_type "$REGISTRY_TYPE" \
              --arg original "$MCP_NAME" \
              --arg region "$LAMBDA_REGION" \
              --arg bucket "$IMAGE_BUCKET_MK3" \
              '{
                registry: $registry,
                workspace: $workspace,
                repository: $repository,
                tag: $tag,
                registry_type: $registry_type,
                original: $original,
                region: $region,
                bucket: $bucket
              }')
            
            echo "Calling Blaxel API to register image..."
            echo "URL: $BL_API_URL/v0/admin/images"
            echo "Workspace: $WORKSPACE"
            echo "Repository: $MCP_NAME"
            echo "Tag: $IMAGE_TAG"
            echo "Payload: $API_PAYLOAD"
            
            # Make the API call
            HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" --request PUT \
              --url "$BL_API_URL/v0/admin/images" \
              --header "Authorization: Basic $AUTH_HEADER" \
              --header "Content-Type: application/json" \
              --data "$API_PAYLOAD")
            
            # Extract HTTP status code
            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n 1)
            HTTP_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')
            
            echo "API Response Status: $HTTP_STATUS"
            if [ ! -z "$HTTP_BODY" ]; then
              echo "API Response Body: $HTTP_BODY"
            fi
            
            # Check if the API call was successful
            if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
              echo "Image successfully registered in Blaxel"
            else
              echo "Warning: Failed to register image in Blaxel (HTTP $HTTP_STATUS)"
              # Don't fail the build if image registration fails
              # exit 1
            fi
          else
            echo "No response from Lambda"
            exit 1
          fi