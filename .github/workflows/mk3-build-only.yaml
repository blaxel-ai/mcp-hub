name: MK3 Build Only

on:
  workflow_dispatch:
    inputs:
      mcp:
        description: "Specific MCP to build (leave empty to use 'all')"
        required: false
        type: string
      all:
        description: "Build all MCPs"
        type: boolean
        required: false
        default: false
      tag:
        description: "Image tag to use (defaults to latest commit SHA)"
        required: false
        type: string
      environment:
        description: "Target environment"
        type: choice
        required: true
        default: "dev"
        options:
          - "dev"
          - "prod"

env:
  REGISTRY: ghcr.io
  TAG: ${{ inputs.tag || github.sha }}
  BL_ENV: ${{ inputs.environment }}
  DEV_IMAGE_BUCKET: controlplane-dev-build-images-eu-west-1-89f8d3
  PROD_IMAGE_BUCKET: controlplane-prod-build-images-us-west-2-3c9279

jobs:
  mk3-build:
    runs-on: codebuild-mcp-hub-${{ github.run_id }}-${{ github.run_attempt }}
    environment: ${{ inputs.environment }}
    if: inputs.mcp != '' || inputs.all == true
    steps:
      - name: Build mk3 image
        env:
          MCP_NAME: ${{ inputs.mcp || 'all' }}
          IMAGE_TAG: ${{ env.TAG }}
          BL_TYPE: function
          STAGE: ${{ env.BL_ENV }}
          SRC_REGISTRY: ${{ env.REGISTRY }}/${{ github.repository }}
          BUILD_ID: ${{ github.run_id }}-${{ github.run_attempt }}
          LOG_LEVEL: debug
          IMAGE_BUCKET_MK3: ${{ env.BL_ENV == 'prod' && env.PROD_IMAGE_BUCKET || env.DEV_IMAGE_BUCKET }}
          DEPOT_PROJECT_ID: ${{ env.BL_ENV == 'prod' && secrets.DEPOT_PROJECT_ID_PROD || secrets.DEPOT_PROJECT_ID_DEV }}
          LAMBDA_FUNCTION_NAME: controlplane-${{ env.BL_ENV }}-metamorph
          LAMBDA_REGION: ${{ env.BL_ENV == 'prod' && secrets.LAMBDA_REGION_PROD || secrets.LAMBDA_REGION_DEV }}
          DEPOT_TOKEN: ${{ env.BL_ENV == 'prod' && secrets.DEPOT_TOKEN_PROD || secrets.DEPOT_TOKEN_DEV }}
        run: |
          # Build the JSON payload
          PAYLOAD=$(cat <<EOF
          {
            "otel_enabled": false,
            "bl_env": "$STAGE",
            "output_s3": "s3://${{ env.IMAGE_BUCKET_MK3 }}/$MCP_NAME/$IMAGE_TAG",
            "no_optimize": false,
            "depot_token": "$DEPOT_TOKEN",
            "bl_build_id": "$BUILD_ID",
            "bl_type": "$BL_TYPE",
            "bl_generation": "mk3",
            "log_level": "$LOG_LEVEL",
            "depot_project_id": "$DEPOT_PROJECT_ID",
            "image": "$SRC_REGISTRY/$STAGE/$MCP_NAME:$IMAGE_TAG"
          }
          EOF
          )
          
          echo "Invoking Lambda function: $LAMBDA_FUNCTION_NAME"
          echo "MCP Name: $MCP_NAME"
          echo "Image Tag: $IMAGE_TAG"
          echo "BL Type: $BL_TYPE"
          echo "Lambda Region: $LAMBDA_REGION"
          
          # Show registry URLs without credentials
          echo "Target registries:"
          
          # Invoke Lambda and capture response
          aws lambda invoke \
            --function-name "$LAMBDA_FUNCTION_NAME" \
            --region "$LAMBDA_REGION" \
            --payload "$PAYLOAD" \
            --cli-binary-format raw-in-base64-out \
            --log-type Tail \
            --no-cli-pager \
            --cli-read-timeout 900 \
            --cli-connect-timeout 60 \
            /tmp/response.json
          
          # Check response
          if [ -f /tmp/response.json ]; then
            cat /tmp/response.json | jq '.'
            
            # Check if build was successful
            SUCCESS=$(jq -r '.success // false' /tmp/response.json)
            if [ "$SUCCESS" != "true" ]; then
              echo "Build failed"
              MESSAGE=$(jq -r '.message // "No message provided"' /tmp/response.json)
              echo "Error: $MESSAGE"
              exit 1
            fi
            
            echo "Build completed successfully"
          else
            echo "No response from Lambda"
            exit 1
          fi
