name: MK3 Build Only

on:
  workflow_dispatch:
    inputs:
      mcp:
        description: "Specific MCP to build (leave empty to use 'all')"
        required: false
        type: string
      all:
        description: "Build all MCPs"
        type: boolean
        required: false
        default: false
      tag:
        description: "Image tag to use (defaults to latest commit SHA)"
        required: false
        type: string
      environment:
        description: "Target environment"
        type: choice
        required: true
        default: "dev"
        options:
          - "dev"
          - "prod"

env:
  REGISTRY: ghcr.io
  TAG: ${{ inputs.tag || github.sha }}
  BL_ENV: ${{ inputs.environment }}

jobs:
  generate-servers-list:
    runs-on: ubuntu-latest
    outputs:
      servers: ${{ steps.retrieve-servers.outputs.servers }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Retrieve servers list
        id: retrieve-servers
        shell: bash
        run: |
          cd hub
          
          # If a specific MCP is provided, use that
          if [[ ! -z "${{ inputs.mcp }}" ]]; then
            echo "Building specific MCP: ${{ inputs.mcp }}"
            echo "servers=[\"${{ inputs.mcp }}\"]" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get list of all server YAML files
          all_servers=$(tree -J -L 1 | jq -c '.[0].contents | map(.name | rtrimstr(".yaml"))')
          
          # Filter servers
          build_servers=()
          
          if [[ "${{ inputs.all }}" == "true" ]]; then
            echo "Building all servers (excluding disabled/coming soon)"
            for server in $(echo $all_servers | jq -r '.[]'); do
              # Check if the server is disabled or coming soon
              if [ -f "${server}.yaml" ]; then
                disabled=$(grep -E "^disabled: true" "${server}.yaml" || true)
                coming_soon=$(grep -E "^comingSoon: true" "${server}.yaml" || true)
                if [ -z "$disabled" ] && [ -z "$coming_soon" ]; then
                  build_servers+=("$server")
                else
                  echo "Skipping $server (disabled or coming soon)"
                fi
              fi
            done
          else
            echo "No servers specified. Use 'mcp' input for specific server or 'all' for all servers."
            echo "servers=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Convert array to JSON array
          if [ ${#build_servers[@]} -eq 0 ]; then
            echo "No servers to build"
            echo "servers=[]" >> $GITHUB_OUTPUT
          else
            # Create a properly formatted JSON array
            servers_json="["
            for server in "${build_servers[@]}"; do
              if [ "$servers_json" != "[" ]; then
                servers_json="$servers_json,"
              fi
              servers_json="$servers_json\"$server\""
            done
            servers_json="$servers_json]"
            echo "Building servers: $servers_json"
            echo "servers=$servers_json" >> $GITHUB_OUTPUT
          fi

  mk3-build:
    runs-on: codebuild-mcp-hub-${{ github.run_id }}-${{ github.run_attempt }}
    environment: ${{ inputs.environment }}
    needs: generate-servers-list
    if: needs.generate-servers-list.outputs.servers != '[]'
    strategy:
      matrix:
        server: ${{ fromJson(needs.generate-servers-list.outputs.servers) }}
    steps:
      - name: Build mk3 image
        env:
          MCP_NAME: ${{ matrix.server }}
          IMAGE_TAG: ${{ env.TAG }}
          BL_TYPE: function
          STAGE: ${{ env.BL_ENV }}
          SRC_REGISTRY: ${{ env.REGISTRY }}/${{ github.repository }}
          BUILD_ID: ${{ github.run_id }}-${{ github.run_attempt }}
          LOG_LEVEL: debug
          DEPOT_PROJECT_ID: ${{ env.BL_ENV == 'prod' && secrets.DEPOT_PROJECT_ID_PROD || secrets.DEPOT_PROJECT_ID_DEV }}
          LAMBDA_FUNCTION_NAME: controlplane-${{ env.BL_ENV }}-metamorph
          LAMBDA_REGION: ${{ env.BL_ENV == 'prod' && secrets.LAMBDA_REGION_PROD || secrets.LAMBDA_REGION_DEV }}
          REGISTRY_CONFIG: ${{ env.BL_ENV == 'prod' && secrets.REGISTRY_CONFIG_PROD || secrets.REGISTRY_CONFIG_DEV }}
          DEPOT_TOKEN: ${{ env.BL_ENV == 'prod' && secrets.DEPOT_TOKEN_PROD || secrets.DEPOT_TOKEN_DEV }}
        run: |
          # Parse registry configuration from JSON
          # Expected format:
          # [
          #   {
          #     "url": "registry1.example.com:8443/path",
          #     "path": "blaxel",
          #     "username": "user1",
          #     "password": "pass1"
          #   },
          #   {
          #     "url": "registry2.example.com:8443/path",
          #     "path": "blaxel",
          #     "username": "user2", 
          #     "password": "pass2"
          #   }
          # ]
          
          # Build push_to JSON array from registry configuration
          PUSH_TO_JSON=$(echo "$REGISTRY_CONFIG" | jq -c 'map({
            host: "",
            url: .url,
            path: .path,
            user: .username,
            password: .password,
            secure: true
          }) | @json' | jq -r)
          
          # Build the JSON payload
          PAYLOAD=$(cat <<EOF
          {
            "otel_enabled": false,
            "bl_env": "$STAGE",
            "push_to": $PUSH_TO_JSON,
            "no_optimize": false,
            "depot_token": "$DEPOT_TOKEN",
            "bl_build_id": "$BUILD_ID",
            "bl_type": "$BL_TYPE",
            "bl_generation": "mk3",
            "log_level": "$LOG_LEVEL",
            "depot_project_id": "$DEPOT_PROJECT_ID",
            "bl_image_override": "$STAGE/$MCP_NAME:$IMAGE_TAG",
            "image": "$SRC_REGISTRY/$STAGE/$MCP_NAME:$IMAGE_TAG"
          }
          EOF
          )
          
          echo "Invoking Lambda function: $LAMBDA_FUNCTION_NAME"
          echo "MCP Name: $MCP_NAME"
          echo "Image Tag: $IMAGE_TAG"
          echo "BL Type: $BL_TYPE"
          echo "Number of registries: $(echo "$REGISTRY_CONFIG" | jq 'length')"
          echo "Lambda Region: $LAMBDA_REGION"
          
          # Show registry URLs without credentials
          echo "Target registries:"
          echo "$REGISTRY_CONFIG" | jq -r '.[].url'
          
          # Invoke Lambda and capture response
          aws lambda invoke \
            --function-name "$LAMBDA_FUNCTION_NAME" \
            --region "$LAMBDA_REGION" \
            --payload "$PAYLOAD" \
            --cli-binary-format raw-in-base64-out \
            --log-type Tail \
            --no-cli-pager \
            --cli-read-timeout 900 \
            --cli-connect-timeout 60 \
            /tmp/response.json
          
          # Check response
          if [ -f /tmp/response.json ]; then
            cat /tmp/response.json | jq '.'
            
            # Check if build was successful
            SUCCESS=$(jq -r '.success // false' /tmp/response.json)
            if [ "$SUCCESS" != "true" ]; then
              echo "Build failed"
              MESSAGE=$(jq -r '.message // "No message provided"' /tmp/response.json)
              echo "Error: $MESSAGE"
              exit 1
            fi
            
            echo "Build completed successfully"
          else
            echo "No response from Lambda"
            exit 1
          fi
